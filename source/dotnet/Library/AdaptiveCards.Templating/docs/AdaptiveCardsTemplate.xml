<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdaptiveCards.Templating</name>
    </assembly>
    <members>
        <member name="T:AdaptiveCards.Templating.AdaptiveCardsTemplateResult">
            <summary>
            Used by AdaptiveCardsTemplateVisitorClass to return result from its visitor methods
            </summary>
        </member>
        <member name="T:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.EvaluationResult">
            <summary>
            Indicates evaluation result of $when expression
            </summary>
        </member>
        <member name="F:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.EvaluationResult.NotEvaluated">
            <summary>
            Expression has not been evaluated
            </summary>
        </member>
        <member name="F:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.EvaluationResult.EvaluatedToTrue">
            <summary>
            Expression evaluated true
            </summary>
        </member>
        <member name="F:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.EvaluationResult.EvaluatedToFalse">
            <summary>
            Expression evaluated false
            </summary>
        </member>
        <member name="P:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.HasItBeenDropped">
            <summary>
            Indicates that parsing Context has been dropped
            </summary>
        </member>
        <member name="P:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.IsWhen">
            <summary>
            Indicates that this instance captures the result of $when
            </summary>
        </member>
        <member name="P:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.Predicate">
            <summary>
            Predicate of $when expression
            </summary>
        </member>
        <member name="P:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.WhenEvaluationResult">
            <summary>
            Indicates the result of evaluation result of $when expression
            </summary>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.#ctor">
            <summary>
            constructor for <c>AdaptiveCardsTemplateResult</c> class
            </summary>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.#ctor(System.String)">
            <summary>
            constructs a result instance with <paramref name="capturedString"/>
            </summary>
            <param name="capturedString"></param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.#ctor(System.String,System.String)">
            <summary>
            construct a result instance for $when expression
            </summary>
            <param name="capturedString">result string after parsing $when expression</param>
            <param name="predicate">predicate of $when</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.Append(System.String)">
            <summary>
            Appends <paramref name="capturedString"/> to its result
            </summary>
            <param name="capturedString"></param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.Append(AdaptiveCards.Templating.AdaptiveCardsTemplateResult)">
            <summary>
            Appends another <paramref name="result"/> instance to its result
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateResult.ToString">
            <summary>
            returns string representation
            </summary>
            <returns><c>string</c></returns>
        </member>
        <member name="T:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor">
            <summary>
            an intance of this class is used in visiting a parse tree that's been generated by antlr4 parser
            </summary>
        </member>
        <member name="T:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.DataContext">
            <summary>
            maintains data context
            </summary>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.DataContext.#ctor(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            constructs a data context of which current data is jtoken
            </summary>
            <param name="jtoken">new data to kept as data context</param>
            <param name="rootDataContext">root data context</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.DataContext.#ctor(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            overload contructor that takes <paramref name="text"/> which is <c>string</c>
            </summary>
            <exception cref="T:Newtonsoft.Json.JsonException"><c>JToken.Parse(text)</c> can throw JsonException if <paramref name="text"/> is invalid json</exception>
            <param name="text">json in string</param>
            <param name="rootDataContext">a root data context</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.DataContext.Init(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializer method that takes jtoken and root data context to initialize a data context object
            </summary>
            <param name="jtoken">current data context</param>
            <param name="rootDataContext">root data context</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.DataContext.GetDataContextAtIndex(System.Int32)">
            <summary>
            retrieve a <see cref="T:Newtonsoft.Json.Linq.JObject"/> from this DataContext instance if <see cref="T:Newtonsoft.Json.Linq.JToken"/> is a <see cref="T:Newtonsoft.Json.Linq.JArray"/> at <paramref name="index"/>
            </summary>
            <param name="index"></param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JObject"/> at<paramref name="index"/> of a <see cref="T:Newtonsoft.Json.Linq.JArray"/></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.#ctor(System.Func{System.String,System.Object},System.String)">
            <summary>
            a constructor for AdaptiveCardsTemplateVisitor
            </summary>
            <param name="nullSubstitutionOption">it will called upon when AEL finds no suitable functions registered in given AEL expression during evaluation the expression</param>
            <param name="data">json data in string which will be set as a root data context</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.GetCurrentDataContext">
            <summary>
            returns current data context
            </summary>
            <returns><see cref="T:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.DataContext"/></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.PushDataContext(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            creates <see cref="T:Newtonsoft.Json.Linq.JToken"/> object based on stringToParse, and pushes the object onto a stack
            </summary>
            <param name="stringToParse"></param>
            <param name="rootDataContext">current root data context</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.PushDataContext(AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.DataContext)">
            <summary>
            push a <c>DataContext</c> onto a stack
            </summary>
            <param name="context"><c>context</c> to push</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.PushTemplatedDataContext(System.String)">
            <summary>
            Given a <paramref name="jpath"/>, create a new <see cref="T:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.DataContext"/> based on a current <see cref="T:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.DataContext"/>
            </summary>
            <param name="jpath">a json selection path</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.PopDataContext">
            <summary>
            Pops a data context
            </summary>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.HasDataContext">
            <summary>
            Checks if there is a data context
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitTemplateData(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateDataContext)">
            <summary>
            antlr runtime wil call this method when parse tree's context is <see cref="T:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateDataContext"/>
            <para>It is used in parsing a pair that has $data as key</para>
            <para>It creates new data context, and set it as current memory scope</para>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitTemplateStringWithRoot(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateStringWithRootContext)">
            <summary>
            Visitor method for <c>templateRoot</c> grammar in <c>AdaptiveCardsTemplateParser.g4</c>
            </summary>
            <param name="context"></param>
            <returns><see cref="T:AdaptiveCards.Templating.AdaptiveCardsTemplateResult"/></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitTemplateRootData(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateRootDataContext)">
            <summary>
            Visitor method for <c>templateRootData</c> grammar rule in <c>AdaptiveCardsTemplateParser.g4</c>
            </summary>
            <param name="context"></param>
            <returns><see cref="T:AdaptiveCards.Templating.AdaptiveCardsTemplateResult"/></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitValueTemplateExpression(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTemplateExpressionContext)">
            <summary>
            Visitor method for <c>valueTemplateExpresssion</c> grammar rule <c>AdaptiveCardsTemplateParser.g4</c>
            </summary>
            <remarks>parsed string has a form of "$when" : ${}</remarks>
            <param name="context"></param>
            <returns>AdaptiveCardsTemplateResult</returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitValueTemplateString(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTemplateStringContext)">
            <summary>
            Visitor method for <c>valueTemplateString</c> grammar rule <c>AdaptiveCardsTemplateParser.g4</c>
            </summary>
            <param name="context"></param>
            <returns><c>AdaptiveCardsTemplateResult</c></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitValueObject(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueObjectContext)">
            <summary>
            Visitor method for <c>valueObject</c> grammar rule <c>AdaptiveCardsTemplateParser.g4</c>
            </summary>
            <param name="context"></param>
            <returns><c>AdaptiveCardsTemplateResult</c></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitObj(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ObjContext)">
            <summary>
            Visitor method for <c>obj</c> grammar rule <c>AdaptiveCardsTemplateParser.g4</c>
            </summary>
            <param name="context"></param>
            <returns><c>AdaptiveCardsTemplateResult</c></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <summary>
            Visitor method for <c>ITernminalNode</c> 
            <para>collects token as string and expand template if needed</para>
            </summary>
            <param name="node"></param>
            <returns><c>AdaptiveCardsTemplateResult</c></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.ExpandTemplatedString(Antlr4.Runtime.Tree.ITerminalNode,System.Boolean)">
            <summary>
            Visitor method for <c>templatdString</c> label in <c>AdaptiveCardsTemplateParser.g4</c>
            </summary>
            <param name="node"></param>
            <param name="isExpanded"></param>
            <returns><c>AdaptiveCardsTemplateResult</c></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.Expand(System.String,AdaptiveExpressions.Memory.SimpleObjectMemory,System.Boolean)">
            <summary>
            Expands template expression using Adaptive Expression Library (AEL)
            </summary>
            <param name="unboundString"></param>
            <param name="data"></param>
            <param name="isTemplatedString"></param>
            <returns><c>string</c></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitTemplateWhen(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateWhenContext)">
            <summary>
            return the parsed result of $when from pair context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitArray(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ArrayContext)">
            <summary>
            Visit method for <c>array</c> grammar in <c>AdaptiveCardsTemplateParser.g4</c>
            </summary>
            <param name="context"></param>
            <returns>AdaptiveCardsTemplateResult</returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.IsTrue(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Evaluates a predicate
            </summary>
            <param name="predicate"></param>
            <param name="data"></param>
            <returns><c>true</c> if predicate is evaluated to <c>true</c></returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateVisitor.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)">
            <summary>
            Visits each children in IRuleNode
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AdaptiveCards.Templating.AdaptiveCardTemplate">
            <summary>
            The main <c>AdaptiveCardTemplate</c> class
            Contain all methods for performaing data binding to <c>AdaptiveCardTemplate</c>
            <list type="bullet">
            <item>
            <term>Expand</term>
            <description></description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardTemplate.#ctor(System.Object)">
             <summary>
             <para>Creates an instance of AdaptiveCardTemplate</para>
             </summary>
             <remarks>
             <para>Once created, it will contain a parsed tree based on jsonTemplate</para>
             <para>Data is bound by calling <c>Expand</c> on the object</para>
             <para>The intance can be rebound with different data by calling <c>Expand</c></para>
             <see cref="M:AdaptiveCards.Templating.AdaptiveCardTemplate.Expand(AdaptiveCards.Templating.EvaluationContext,System.Func{System.String,System.Object})"/>
             </remarks>
             <example>
             <code>
             var jsonTemplate = "
             {
                "type": "AdaptiveCard",
                "version": "1.0",
                "body": [
                    {
                        "type": "TextBlock",
                        "text": "Hello ${person.firstName}"
                    }
                ]
            }"
             var template = new AdaptiveCardTemplate(jsonTemplate);
             </code>
             </example>
             <param name="jsonTemplate">string in json or seriazable object</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardTemplate.Expand(AdaptiveCards.Templating.EvaluationContext,System.Func{System.String,System.Object})">
            <summary>
            Bind data in <paramref name="context"/> to the instance of AdaptiveCardTemplate
            </summary>
            <remarks>
            <para> Data can be also inlined in AdaptiveCardTemplate payload</para>
            <para> Expand can be called multiple times with different or same <paramref name="context"/></para>
            <para> Returned string can be invalid AdaptiveCards, such validation will be performed by AdaptiveCards Parser</para>
            <para> <paramref name="nullSubstitutionOption"/> defines behavior when no suitable data is found for a template entry</para>
            <para> Default behavior is leaving templated string unchanged</para>
            </remarks>
            <param name="context">provides data context</param>
            <param name="nullSubstitutionOption">defines behavior when no suitable data is found for a template entry</param>
            <example>
            <code>
            var template = new AdaptiveCardTemplate(jsonTemplate);
            var context = new AdaptiveCardsEvaluationContext(jsonData);
            template.Expand(context);
            </code>
            </example>
            <seealso cref="T:AdaptiveCards.Templating.EvaluationContext"/>
            <returns>json as string</returns>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardTemplate.Expand(System.Object,System.Func{System.String,System.Object})">
            <summary>
            Create a root data context using <paramref name="rootData"/>, and bind it to the instance of AdaptiveCardTemplate
            </summary>
            <remarks>
            <para> Data can be also inlined in AdaptiveCardTemplate payload</para>
            <para> Expand can be called multiple times with different or same <paramref name="rootData"/></para>
            <para> Returned string can be invalid AdaptiveCards, such validation will be performed by AdaptiveCards Parser</para>
            <para> <paramref name="nullSubstitutionOption"/> defines behavior when no suitable data is found for a template entry</para>
            <para> Default behavior is leaving templated string unchanged</para>
            </remarks>
            <param name="rootData">Serializable object or a string in valid json format that will be used as data context</param>
            <param name="nullSubstitutionOption">Defines behavior when no suitable data is found for a template entry</param>
            <example>
            <code>
            var template = new AdaptiveCardTemplate(jsonTemplate);
            template.Expand(rootData);
            </code>
            </example>
            <seealso cref="T:AdaptiveCards.Templating.EvaluationContext"/>
            <returns>json as string</returns>
        </member>
        <member name="T:AdaptiveCards.Templating.AdaptiveTemplateException">
            <summary>
            AdaptiveCardTemplate Library's Exception class
            </summary>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveTemplateException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveTemplateException.#ctor(System.String)">
            <summary>
            Constructor that takes single argument that is exception message
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveTemplateException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that takes message and inner exception to pass
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:AdaptiveCards.Templating.EvaluationContext">
            <summary>
            Provides Data Context to AdaptiveCardsTemplate Parser
            </summary>
        </member>
        <member name="P:AdaptiveCards.Templating.EvaluationContext.Root">
             <summary>
             Provides Root Data Context 
             </summary>
             <example>
             <code>
             
             string jsonData = @"{
                 ""person"": {
                     ""firstName"": ""Hello"",
                     ""lastName"": ""World""
             }";
            
             var context = new EvaluationContext()
             {
                 Root = jsonData
             };
            
             </code>
             </example>
        </member>
        <member name="M:AdaptiveCards.Templating.EvaluationContext.#ctor">
            <summary>
            default consturctor
            </summary>
        </member>
        <member name="M:AdaptiveCards.Templating.EvaluationContext.#ctor(System.Object)">
            <summary>
            constructor for <c>EvaluationContext</c> that takes one argument that will be used for root data context
            </summary>
            <param name="rootData"></param>
        </member>
        <member name="T:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:AdaptiveCards.Templating.AdaptiveCardsTemplateParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueTemplateExpression(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTemplateExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTemplateExpression</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueObject(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueObjectContext)">
            <summary>
            Visit a parse tree produced by the <c>valueObject</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueNull(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueNullContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueTemplateString(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTemplateStringContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTemplateString</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueNumber(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueTrue(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTrueContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueFalse(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueFalseContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueString(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueStringContext)">
            <summary>
            Visit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueTemplateStringWithRoot(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTemplateStringWithRootContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTemplateStringWithRoot</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValueArray(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueArrayContext)">
            <summary>
            Visit a parse tree produced by the <c>valueArray</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitTemplateWhen(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateWhenContext)">
            <summary>
            Visit a parse tree produced by the <c>templateWhen</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitJsonPair(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.JsonPairContext)">
            <summary>
            Visit a parse tree produced by the <c>jsonPair</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitTemplateData(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateDataContext)">
            <summary>
            Visit a parse tree produced by the <c>templateData</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitTemplateRootData(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateRootDataContext)">
            <summary>
            Visit a parse tree produced by the <c>templateRootData</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitTemplateStringWithRoot(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateStringWithRootContext)">
            <summary>
            Visit a parse tree produced by the <c>templateStringWithRoot</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateRoot"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitTemplatedString(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplatedStringContext)">
            <summary>
            Visit a parse tree produced by the <c>templatedString</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateString"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitJson(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.JsonContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.json"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitObj(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ObjContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.obj"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitPair(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.PairContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitArray(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ArrayContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.array"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitValue(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitTemplateString(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateStringContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateString"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitTemplateRoot(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateRootContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateRoot"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1.VisitTemplateExpression(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:AdaptiveCards.Templating.IAdaptiveCardsTemplateParserVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueTemplateExpression(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTemplateExpressionContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTemplateExpression</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueObject(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueObjectContext)">
            <summary>
            Visit a parse tree produced by the <c>valueObject</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueNull(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueNullContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNull</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueTemplateString(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTemplateStringContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTemplateString</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueNumber(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>valueNumber</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueTrue(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTrueContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTrue</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueFalse(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueFalseContext)">
            <summary>
            Visit a parse tree produced by the <c>valueFalse</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueString(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueStringContext)">
            <summary>
            Visit a parse tree produced by the <c>valueString</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueTemplateStringWithRoot(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueTemplateStringWithRootContext)">
            <summary>
            Visit a parse tree produced by the <c>valueTemplateStringWithRoot</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValueArray(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueArrayContext)">
            <summary>
            Visit a parse tree produced by the <c>valueArray</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitTemplateWhen(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateWhenContext)">
            <summary>
            Visit a parse tree produced by the <c>templateWhen</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitJsonPair(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.JsonPairContext)">
            <summary>
            Visit a parse tree produced by the <c>jsonPair</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitTemplateData(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateDataContext)">
            <summary>
            Visit a parse tree produced by the <c>templateData</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitTemplateRootData(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateRootDataContext)">
            <summary>
            Visit a parse tree produced by the <c>templateRootData</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitTemplateStringWithRoot(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateStringWithRootContext)">
            <summary>
            Visit a parse tree produced by the <c>templateStringWithRoot</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateRoot"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitTemplatedString(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplatedStringContext)">
            <summary>
            Visit a parse tree produced by the <c>templatedString</c>
            labeled alternative in <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateString"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitJson(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.JsonContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.json"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitObj(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ObjContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.obj"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitPair(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.PairContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.pair"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitArray(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ArrayContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.array"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitValue(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.ValueContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.value"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitTemplateString(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateStringContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateString"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitTemplateRoot(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateRootContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateRoot"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParserBaseVisitor`1.VisitTemplateExpression(AdaptiveCards.Templating.AdaptiveCardsTemplateParser.TemplateExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveCards.Templating.AdaptiveCardsTemplateParser.templateExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
    </members>
</doc>
