{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "https://microsoft.github.io/AdaptiveCards/schemas/adaptive-card.json",
  "type": "object",
  "title": "Microsoft Adaptive Card Schema",
  "description": "Card schema for the adaptive card.",
  "properties": {
    "type": {
      "type": "string",
      "enum": [
        "AdaptiveCard"
      ]
    },
    "title": {
      "type": "string",
      "description": "Title/caption for the adaptive card."
    },
    "body": {
      "$ref": "#/definitions/CardElements"
    },
    "actions": {
      "$ref": "#/definitions/Actions"
    }
  },
  "required": [
    "type"
  ],
  "definitions": {
    "Action": {
      "anyOf": [
        {
          "$ref": "#/definitions/Action.Submit"
        },
        {
          "$ref": "#/definitions/Action.ShowCard"
        },
        {
          "$ref": "#/definitions/Action.Http"
        },
        {
          "$ref": "#/definitions/Action.OpenUrl"
        }
      ]
    },
    "Action.Http": {
      "additionalProperties": false,
      "description": "Action.Http represents the properties needed to do an Http request. All input properties are available for use via data binding. Properties can be data bound to the Uri and Body properties, allowing you to send a request to an arbitrary url.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Action.Http"
          ]
        },
        "body": {
          "type": "string",
          "description": "content to post (can have binding information)"
        },
        "headers": {
          "type": "object",
          "description": "Object which represents headers Example: { \"content-type\":\"application/json\" }"
        },
        "method": {
          "type": "string",
          "enum": [
            "POST",
            "PUT",
            "DELETE",
            "GET"
          ],
          "description": "Http method (Default: POST)"
        },
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action"
        },
        "url": {
          "type": "string",
          "description": "url to use (can have binding information)"
        }
      },
      "required": [
        "type",
        "url"
      ],
      "type": "object"
    },
    "Action.OpenUrl": {
      "additionalProperties": false,
      "description": "When Action.OpenUrl is invoked it will show the given url, either by launching it to an external web browser or showing in-situ with embedded web browser.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action"
        },
        "type": {
          "type": "string",
          "enum": [
            "Action.OpenUrl"
          ]
        },
        "url": {
          "type": "string",
          "description": "Default (browser) url to use"
        }
      },
      "required": [
        "type",
        "url"
      ],
      "type": "object"
    },
    "Action.ShowCard": {
      "additionalProperties": false,
      "description": "Action.ShowCard defines an inline AdaptiveCard which is shown to the user when it is clicked.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Action.ShowCard"
          ]
        },
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "card": {
          "$ref": "#/definitions/AdaptiveCard"
        }
      },
      "required": [
        "type",
        "card"
      ],
      "type": "object"
    },
    "Action.Submit": {
      "additionalProperties": false,
      "description": "Submit action gathers up input fields, merges with optional data field and generates event to client asking for data to be submitted. It is up to the client to determine how that data is processed. For example: With BotFramework bots the client would send an activity through the messaging medium to the bot.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Action.Submit"
          ]
        },
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action"
        },
        "data": {
          "type": "object",
          "description": "initial data that input fields will be combined with. This is essentially 'hidden' properties"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Actions": {
      "additionalItems": true,
      "items": {
        "$ref": "#/definitions/Action"
      },
      "type": "array"
    },
    "AdaptiveCard": {
      "additionalProperties": false,
      "properties": {
        "actions": {
          "$ref": "#/definitions/Actions"
        },
        "body": {
          "$ref": "#/definitions/CardElements"
        },
        "title": {
          "type": "string",
          "description": "Title/caption for the adaptive card."
        },
        "type": {
          "type": "string",
          "enum": [
            "AdaptiveCard"
          ]
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "CardElement": {
      "oneOf": [
        {
          "$ref": "#/definitions/TextBlock"
        },
        {
          "$ref": "#/definitions/Image"
        },
        {
          "$ref": "#/definitions/Container"
        },
        {
          "$ref": "#/definitions/ColumnSet"
        },
        {
          "$ref": "#/definitions/FactSet"
        },
        {
          "$ref": "#/definitions/ImageSet"
        },
        {
          "$ref": "#/definitions/Input.Text"
        },
        {
          "$ref": "#/definitions/Input.Number"
        },
        {
          "$ref": "#/definitions/Input.Date"
        },
        {
          "$ref": "#/definitions/Input.Time"
        },
        {
          "$ref": "#/definitions/Input.Toggle"
        },
        {
          "$ref": "#/definitions/Input.ChoiceSet"
        }
      ]
    },
    "CardElements": {
      "additionalItems": true,
      "items": {
        "$ref": "#/definitions/CardElement"
      },
      "type": "array"
    },
    "Choice": {
      "additionalProperties": false,
      "properties": {
        "display": {
          "type": "string",
          "description": "The display text for a choice"
        },
        "isSelected": {
          "type": "boolean",
          "description": "is the choice selected"
        },
        "speak": {
          "$ref": "#/definitions/Speak",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": "the raw value for the choice"
        }
      },
      "required": [
        "display",
        "value"
      ],
      "type": "object"
    },
    "ChoiceInputStyle": {
      "type": "string",
      "description": "Style hint for Input.ChoiceSet",
      "enum": [
        "compact",
        "expanded"
      ]
    },
    "Column": {
      "additionalProperties": false,
      "description": "Defines a container that is part of a ColumnSet",
      "properties": {
        "actions": {
          "$ref": "#/definitions/Actions"
        },
        "backgroundColor": {
          "type": "string",
          "description": "The color of the container's background. This can be any color, and must be expressed in the RGB format with each color component expressed as a 2 digit hexadecimal number. Example: FFFFFF for white, 000000 for black, and 8C8C8C for a shade of gray."
        },
        "backgroundImageUrl": {
          "type": "string",
          "description": "The URL of an image to be used to fill the background of the container. The image is strached horizontally so it fills the entire available width of the container, and its original aspect ratio is maintained."
        },
        "items": {
          "$ref": "#/definitions/CardElements"
        },
        "selectAction": {
          "$ref": "#/definitions/Action"
        },
        "size": {
          "type": [ "string", "number" ],
          "description": "auto, stretch, or a number representing relative width of the column in the column group"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "type": {
          "type": "string",
          "description": "Must be Column",
          "enum": [
            "Column"
          ]
        }
      },
      "required": [
        "type",
        "items"
      ],
      "type": "object"
    },
    "ColumnSet": {
      "additionalProperties": false,
      "description": "The column group Item adds the ability to have a set of Column objects",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Column"
          }
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "type": {
          "type": "string",
          "description": "Must be ColumnSet",
          "enum": [
            "ColumnSet"
          ]
        }
      },
      "required": [
        "type",
        "columns"
      ],
      "type": "object"
    },
    "Container": {
      "additionalProperties": false,
      "description": "The Container is a CardItem which contains a list of CardItems that are logically grouped",
      "properties": {
        "actions": {
          "$ref": "#/definitions/Actions"
        },
        "items": {
          "$ref": "#/definitions/CardElements"
        },
        "selectAction": {
          "$ref": "#/definitions/Action"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "startGroup": {
          "type": "boolean",
          "description": "visually separate this container from preiovus containers"
        },
        "type": {
          "type": "string",
          "description": "Must be Container",
          "enum": [
            "Container"
          ]
        }
      },
      "required": [
        "type",
        "items"
      ],
      "type": "object"
    },
    "Fact": {
      "additionalProperties": false,
      "properties": {
        "title": {
          "type": "string"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "title",
        "value"
      ],
      "type": "object"
    },
    "FactSet": {
      "additionalProperties": false,
      "description": "The FactSet Item makes it simple to display a series of facts (e.g. name/value pairs) in a tabular form.",
      "properties": {
        "facts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fact"
          }
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "type": {
          "type": "string",
          "description": "Must be FactSet",
          "enum": [
            "FactSet"
          ]
        }
      },
      "required": [
        "type",
        "facts"
      ],
      "type": "object"
    },
    "HorizontalAlignment": {
      "type": "string",
      "description": "Controls how Items are horizontally positioned within their container.",
      "enum": [
        "left",
        "center",
        "right"
      ]
    },
    "Image": {
      "additionalProperties": false,
      "description": "The Image Item allows for the inclusion of images in an Adaptive Card.",
      "properties": {
        "horizontalAlignment": {
          "$ref": "#/definitions/HorizontalAlignment"
        },
        "selectAction": {
          "$ref": "#/definitions/Action"
        },
        "size": {
          "$ref": "#/definitions/ImageSize"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "style": {
          "$ref": "#/definitions/ImageStyle"
        },
        "type": {
          "type": "string",
          "description": "Must be Image",
          "enum": [
            "Image"
          ]
        },
        "url": {
          "type": "string",
          "description": "The URL to the image."
        }
      },
      "required": [
        "type",
        "url"
      ],
      "type": "object"
    },
    "ImageSet": {
      "additionalProperties": false,
      "description": "The ImageSet allows for the inclusion of a collection images like a photogallery.",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "imageSize": {
          "$ref": "#/definitions/ImageSize"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "type": {
          "type": "string",
          "description": "Must be ImageSet",
          "enum": [
            "ImageSet"
          ]
        }
      },
      "required": [
        "type",
        "images"
      ],
      "type": "object"
    },
    "ImageSize": {
      "type": "string",
      "description": "Controls the horizontal size (width) of Item. ",
      "enum": [
        "small",
        "normal",
        "medium",
        "large",
        "extraLarge"
      ]
    },
    "ImageStyle": {
      "type": "string",
      "description": "Controls the way Image Items are displayed",
      "enum": [
        "normal",
        "person"
      ]
    },
    "Input.ChoiceSet": {
      "additionalProperties": false,
      "description": "Shows an array of Choice objects",
      "properties": {
        "choices": {
          "type": "array",
          "description": "the choice options",
          "items": {
            "$ref": "#/definitions/Choice"
          }
        },
        "id": {
          "type": "string",
          "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
        },
        "isMultiSelect": {
          "type": "boolean",
          "description": "allow multiple choices to be selected (Default=false)"
        },
        "style": {
          "$ref": "#/definitions/ChoiceInputStyle"
        },
        "type": {
          "description": "Must be Input.ChoiceInput",
          "enum": [
            "Input.ChoiceSet"
          ],
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The initial value for a field"
        }
      },
      "required": [
        "type",
        "id",
        "choices"
      ],
      "type": "object"
    },
    "Input.Date": {
      "additionalProperties": false,
      "description": "Input.Date collects Date from the user,",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
        },
        "max": {
          "type": "string",
          "description": "hint of maximum value expressed in iso-8601 format (may be ignored by some clients)"
        },
        "min": {
          "type": "string",
          "description": "hint of minimum value expressed in iso-8601 format (may be ignored by some clients)"
        },
        "placeholder": {
          "type": "string",
          "description": "Title Description of the input desired"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "type": {
          "type": "string",
          "description": "The type must be Input.Date",
          "enum": [
            "Input.Date"
          ]
        },
        "value": {
          "type": "string",
          "description": "The initial value for a field expressed in iso-8601 format"
        }
      },
      "required": [
        "type",
        "id"
      ],
      "type": "object"
    },
    "Input.Number": {
      "additionalProperties": false,
      "description": "Input.Number collects number from the user,",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
        },
        "max": {
          "type": "string",
          "description": "hint of maximum value (may be ignored by some clients)"
        },
        "min": {
          "type": "string",
          "description": "hint of minimum value (may be ignored by some clients)"
        },
        "placeholder": {
          "type": "string",
          "description": "Title Description of the input desired"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "type": {
          "type": "string",
          "description": "The type must be Input.Number",
          "enum": [
            "Input.Number"
          ]
        },
        "value": {
          "type": "string",
          "description": "The initial value for a field"
        }
      },
      "required": [
        "type",
        "id"
      ],
      "type": "object"
    },
    "Input.Text": {
      "additionalProperties": false,
      "description": "Input.Text collects text from the user,",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
        },
        "isMultiline": {
          "type": "boolean",
          "description": "Do you want to allow multiple lines of input"
        },
        "maxLength": {
          "type": "string",
          "description": "hint of maximum length characters to collect (may be ignored by some clients)"
        },
        "placeholder": {
          "type": "string",
          "description": "Title Description of the input desired"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "style": {
          "$ref": "#/definitions/TextInputStyle"
        },
        "type": {
          "type": "string",
          "description": "Input.Text",
          "enum": [
            "Input.Text"
          ]
        },
        "value": {
          "type": "string",
          "description": "The initial value for a field"
        }
      },
      "required": [
        "type",
        "id"
      ],
      "type": "object"
    },
    "Input.Time": {
      "additionalProperties": false,
      "description": "Input.Time collects Time from the user,",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
        },
        "max": {
          "type": "string",
          "description": "hint of maximum value (may be ignored by some clients)"
        },
        "min": {
          "type": "string",
          "description": "hint of minimum value (may be ignored by some clients)"
        },
        "placeholder": {
          "type": "string",
          "description": "Title Description of the input desired"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "type": {
          "type": "string",
          "description": "The type must be Input.Time",
          "enum": [
            "Input.Time"
          ]
        },
        "value": {
          "type": "string",
          "description": "The initial value for a field expressed in iso-8601 format"
        }
      },
      "required": [
        "type",
        "id"
      ],
      "type": "object"
    },
    "Input.Toggle": {
      "additionalProperties": false,
      "description": "Input.Toggle collects text from the user,",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "title": {
          "type": "string",
          "description": "Title for the toggle"
        },
        "type": {
          "type": "string",
          "description": "Input.Toggle",
          "enum": [
            "Input.Toggle"
          ]
        },
        "value": {
          "type": "string",
          "description": "The current selected value (default:false)"
        },
        "valueOff": {
          "type": "string",
          "description": "The value when toggle is off (default:false)"
        },
        "valueOn": {
          "type": "string",
          "description": "The value when toggle is on (default:true)"
        }
      },
      "required": [
        "type",
        "id",
        "title"
      ],
      "type": "object"
    },
    "Speak": {
      "type": "string",
      "description": "Specifies what should be spoken for this entire Item. This is simple text or SSML fragment"
    },
    "TextBlock": {
      "additionalProperties": false,
      "description": "The TextBlock Item allows for the inclusion of text, with various font sizes, weight and color, in Adaptive Cards.",
      "properties": {
        "color": {
          "type": "string",
          "description": "Controls the color of TextBlock Items.",
          "enum": [
            "default",
            "dark",
            "light",
            "accent",
            "good",
            "warning",
            "attention"
          ]
        },
        "horizontalAlignment": {
          "$ref": "#/definitions/HorizontalAlignment"
        },
        "isSubtle": {
          "type": "boolean",
          "description": "Indicates whether the color of the text should be slightly toned down to appear less prominent"
        },
        "maxLines": {
          "type": "number",
          "description": "When Wrap is true, you can specify the maximum number of lines to allow the textBlock to use."
        },
        "size": {
          "type": "string",
          "description": "Controls how Items are horizontally positioned within their container.",
          "enum": [
            "small",
            "normal",
            "medium",
            "large",
            "extraLarge"
          ]
        },
        "speak": {
          "$ref": "#/definitions/Speak"
        },
        "text": {
          "type": "string",
          "description": "The actual text to display"
        },
        "type": {
          "type": "string",
          "description": "Must be TextBlock",
          "enum": [
            "TextBlock"
          ]
        },
        "weight": {
          "description": "Controls the weight of TextBlock Items",
          "enum": [
            "lighter",
            "normal",
            "bolder"
          ],
          "type": "string"
        },
        "wrap": {
          "type": "boolean",
          "description": "True if be is allowed to wrap"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "type": "object"
    },
    "TextInputStyle": {
      "type": "string",
      "description": "Style hint for Input.Text.",
      "enum": [
        "text",
        "tel",
        "url",
        "email"
      ]
    }
  }
}
