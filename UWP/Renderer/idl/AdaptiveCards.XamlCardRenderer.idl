import "inspectable.idl";
import "Windows.Foundation.idl";
import "Windows.UI.Xaml.idl";

#include <sdkddkver.h>

namespace AdaptiveCards
{
    namespace XamlCardRenderer
    {
        namespace ObjectModel
        {
            [version(NTDDI_WIN10_RS1)]
            typedef [v1_enum] enum Size
            {
                Auto = 0,
                Stretch,
                Small,
                Medium,
                Large
            } Size;

            [version(NTDDI_WIN10_RS1)]
            typedef [v1_enum] enum TextSize
            {
                Small = 0,
                Normal,
                Medium,
                Large,
                ExtraLarge
            } TextSize;

            [version(NTDDI_WIN10_RS1)]
            typedef [v1_enum] enum TextWeight
            {
                Lighter = 0,
                Normal,
                Bolder
            } TextWeight;

            [version(NTDDI_WIN10_RS1)]
            typedef [v1_enum] enum TextColor
            {
                Default = 0,
                Dark,
                Light,
                Accent,
                Good,
                Warning,
                Attention
            } TextColor;

            [version(NTDDI_WIN10_RS1)]
            typedef [v1_enum] enum HAlignment
            {
                Left = 0,
                Center,
                Right
            } HAlignment;

            runtimeclass AdaptiveTextBlock;

            [
                uuid(f3b844da-2d6a-4003-8a57-4e5541fcd078),
                version(NTDDI_WIN10_RS1),
                exclusiveto(AdaptiveTextBlock)
            ]
            interface IAdaptiveTextBlock : IInspectable
            {
                [propget] HRESULT TextSize([out, retval] TextSize* value);
                [propput] HRESULT TextSize([in] TextSize value);

                [propget] HRESULT TextWeight([out, retval] TextWeight* value);
                [propput] HRESULT TextWeight([in] TextWeight value);

                [propget] HRESULT Text([out, retval] HSTRING* value);
                [propput] HRESULT Text([in] HSTRING value);

                [propget] HRESULT IsSubtle([out, retval] boolean* value);
                [propput] HRESULT IsSubtle([in] boolean value);

                [propget] HRESULT Wrap([out, retval] boolean* value);
                [propput] HRESULT Wrap([in] boolean value);

                HRESULT Render([out, retval] Windows.UI.Xaml.UIElement** uiElement);
            };

            [
                version(NTDDI_WIN10_RS1),
                activatable(NTDDI_WIN10_RS1)
            ]
            runtimeclass AdaptiveTextBlock
            {
                [default] interface IAdaptiveTextBlock;
            };
        }

        #pragma region Temporary defintions
        runtimeclass AdaptiveCard;

        [
        uuid(00000000-0000-0000-0000-000000000001),
        version(NTDDI_WIN10_RS1),
        exclusiveto(AdaptiveCard),
        ]
        interface IAdaptiveCard : IInspectable
        {

        };

        [
        version(NTDDI_WIN10_RS1),
        activatable(NTDDI_WIN10_RS1),
        ]
        runtimeclass AdaptiveCard
        {
            [default] interface IAdaptiveCard;
        }

        #pragma endregion Temporary defintions
                            
        runtimeclass XamlCardRenderer;
        runtimeclass ImageRenderResult;

        [flags]
        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum RenderOptions
        {
            None = 0x0,
            SupportsActionBar = 0x1,
            SupportsInlineActions = 0x2,
        }RenderOptions;

        [
            uuid(D6C7C240-53AF-4F34-87BE-301D9C68465D),
            version(NTDDI_WIN10_RS1),
            exclusiveto(ImageRenderResult),
        ]
        interface IImageRenderResult : IInspectable
        {
            [propget] HRESULT AltText([out, retval] HSTRING *altText);
            [propget] HRESULT ImageBuffer([out, retval] Windows.Storage.Streams.IBuffer** imageBuffer);
            [propget] HRESULT IsAllContentClippedOut([out, retval] boolean *allContentClipped);
            [propget] HRESULT ImageWidthPixels([out, retval] int *width);
            [propget] HRESULT ImageHeightPixels([out, retval] int *height);
        }

        [
            uuid(DB7C7BB8-C313-440A-A421-B52620107F8B),
            version(NTDDI_WIN10_RS1),
            exclusiveto(XamlCardRenderer),
        ]
        interface IXamlCardRenderer : IInspectable
        {
            HRESULT SetRenderOptions([in] RenderOptions options);
            HRESULT SetOverrideStyles([in] Windows.UI.Xaml.ResourceDictionary* overrideDictionary);
            HRESULT RenderCardAsXaml([in] AdaptiveCard* adaptiveCard,[out, retval] Windows.UI.Xaml.UIElement** root);
            HRESULT RenderCardAsImage([in] AdaptiveCard* adaptiveCard,[out, retval] Windows.Foundation.IAsyncOperation<ImageRenderResult>** result);
        }

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1),
        ]
        runtimeclass ImageRenderResult
        {
            [default] interface IImageRenderResult;
        }

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1),
        ]
        runtimeclass XamlCardRenderer
        {
            [default] interface IXamlCardRenderer;
        }


    }
}